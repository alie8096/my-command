# name: Convert Markdown to HTML

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up Pandoc
#       run: sudo apt-get install pandoc

#     - name: Add custom template
#       run: |
#         echo '<!DOCTYPE html>
#         <html lang="en">
#         <head>
#             <meta charset="UTF-8">
#             <meta name="viewport" content="width=device-width, initial-scale=1.0">
#             <title>${title}</title>
#             <link rel="stylesheet" href="statics/style.css">
#         </head>
#         <body>
#             $body$
#             <script src="statics/app.js"></script>
#         </body>
#         </html>' > template.html

#     - name: Convert Markdown to HTML with template
#       run: pandoc -s -o index.html README.md --template=template.html

#     - name: Commit and push changes to main branch
#       run: |
#         git config --global user.name "GitHub Actions"
#         git config --global user.email "actions@github.com"
#         git add index.html
#         git commit -m "Update HTML file with custom template"
#         git pull origin main --rebase
#         git push origin main
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Convert Markdown to HTML

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: pip install markdown pygments python-slugify

    - name: Convert Markdown to HTML using Python
      run: |
        python - <<EOF
        import markdown
        from pygments import highlight
        from pygments.lexers import get_lexer_by_name, TextLexer
        from pygments.formatters import HtmlFormatter
        import re
        from slugify import slugify

        # Function to highlight code blocks
        def highlight_code(code, language):
            try:
                lexer = get_lexer_by_name(language, stripall=True)
            except Exception:
                lexer = TextLexer(stripall=True)

            formatter = HtmlFormatter(cssclass="code-box", style="colorful")
            highlighted_code = highlight(code, lexer, formatter)

            code_info = f"""
                <div class="code-info">
                    <button class="copy-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 24 24" class="icon-sm"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg>
                        <span>Copy code</span>
                    </button>
                    <span class="language">{language}</span>
                </div>
            """

            highlighted_code = re.sub(r'<div class="code-box">', f'<div class="code-box">{code_info}', highlighted_code)
            return highlighted_code

        # Function to convert markdown to HTML
        def markdown_to_html(md_text):
            # Regex to match code blocks
            code_block_re = re.compile(r'```(\w*)(.*?)```', re.DOTALL)

            def code_block_replacer(match):
                language = match.group(1) if match.group(1) else "text"  # Ensure a default language
                code = match.group(2).rstrip()  # Remove trailing whitespace from code
                return highlight_code(code, language)

            # Convert code blocks
            html_with_highlighted_code = code_block_re.sub(code_block_replacer, md_text)

            # Convert markdown to HTML
            html_content = markdown.markdown(html_with_highlighted_code, extensions=['fenced_code', 'codehilite', 'tables'])

            return html_content

        # Read markdown content
        with open('README.md', 'r', encoding='utf-8') as file:
            md_text = file.read()

        # Convert markdown to HTML
        html_output = markdown_to_html(md_text)

        # Template for the final HTML
        html_template = f"""
        <!DOCTYPE html>
        <html lang="fa" dir="rtl">
        <head>
        <title>My Command</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="description" content="Command e-booklet">
        <meta name="author" content="Mahdi Rezaie, Ali Ebrahimian">

        <link rel="stylesheet" type="text/css" href="statics/style.css">

        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
        </head>
        <body>
        <main>
            <div class="container">
                <div class="content">
                    {html_output}
                </div>
            </div>
        </main>

        <script src="statics/app.js"></script>
        </body>
        </html>
        """

        # Write the output to an HTML file
        with open('index.html', 'w', encoding='utf-8') as file:
            file.write(html_template)
        EOF

    - name: Commit HTML file
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add index.html
        git commit -m "Update HTML file"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
